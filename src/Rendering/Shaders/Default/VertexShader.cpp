#include"../DefaultShaders.h"

namespace Shaders {
    std::string getVertexShader() {
        return "kernel void VertexShader(global void* verticies, double* projectionMatrix, double *cameraTransform) {"
        "    unsigned int id = get_global_id(0);"
        "    unsigned int size = ((unsigned int*)verticies)[0];"
        "    if (id >= size) return;"
        "    id = (id * 3) + 1;"
        "    double* vertex = ((double*)verticies) + id;"
        "    double& x = vertex[0];"
        "    double& y = vertex[1];"
        "    double& z = vertex[2];"
        "    "
        "    x -= cameraTransform[0];" // translation
        "    y -= cameraTransform[1];"
        "    z -= cameraTransform[2];"
        "    "
        "    double tempX = vertex[0];"
        "    double tempY = vertex[1];"
        "    double tempZ = vertex[2];"
        "    cameraTransform[3] *= -1"
        "    cameraTransform[4] *= -1"
        "    cameraTransform[5] *= -1"
        "    double t2 = cameraTransform[6] * cameraTransform[3];" // rotation
        "    double t3 = cameraTransform[6] * cameraTransform[4];"
        "    double t4 = cameraTransform[6] * cameraTransform[5];"
        "    double t5 = -cameraTransform[3] * cameraTransform[3];"
        "    double t6 = cameraTransform[3] * cameraTransform[4];"
        "    double t7 = cameraTransform[3] * cameraTransform[5];"
        "    double t8 = -cameraTransform[4] * cameraTransform[4];"
        "    double t9 = cameraTransform[4] * cameraTransform[5];"
        "    double t10 = -cameraTransform[5] * cameraTransform[5];"
        "    x = 2 * ((t8 + t10) * tempX + (t6 - t4) * tempY + (t3 + t7) * tempZ) + tempX;"
        "    y = 2 * ((t4 + t6) * tempX + (t5 + t10) * tempY + (t9 - t2) * tempZ) + tempY;"
        "    z = 2 * ((t7 - t3) * tempX + (t2 + t9) * tempY + (t5 + t8) * tempZ) + tempZ;"
        "    "
        "    x /= cameraTransform[7];" // scale
        "    y /= cameraTransform[8];"
        "    z /= cameraTransform[9];"
        "    "
        "    tempX = x;"
        "    tempY = y;"
        "    tempZ = z;"
        "    "
        "    x = tempX*projectionMatrix[0] + tempY*projectionMatrix[4] + tempZ*projectionMatrix[8] + projectionMatrix[12];"
        "    y = tempX*projectionMatrix[1] + tempY*projectionMatrix[5] + tempZ*projectionMatrix[9] + projectionMatrix[13];"
        "    z = tempX*projectionMatrix[2] + tempY*projectionMatrix[6] + tempZ*projectionMatrix[10] + projectionMatrix[14];"
        "    double w = tempX*projectionMatrix[3] + tempY*projectionMatrix[7] + tempZ*projectionMatrix[11] + projectionMatrix[15];"
        "    "
        "    x /= w;"
        "    y /= w;"
        "    z /= w;"
        "}";
    }
}
